//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataLake.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DataLakeEntities : DbContext
    {
        public DataLakeEntities()
            : base("name=DataLakeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<USCoastalMarineZone> USCoastalMarineZones { get; set; }
        public virtual DbSet<USState> USStates { get; set; }
        public virtual DbSet<USZipCode> USZipCodes { get; set; }
        public virtual DbSet<DatasetLog> DatasetLogs { get; set; }
        public virtual DbSet<WeatherDataCategory> WeatherDataCategories { get; set; }
        public virtual DbSet<WeatherDataset> WeatherDatasets { get; set; }
        public virtual DbSet<WeatherDatasetType> WeatherDatasetTypes { get; set; }
        public virtual DbSet<WeatherDataType> WeatherDataTypes { get; set; }
        public virtual DbSet<WeatherLocationCategory> WeatherLocationCategories { get; set; }
        public virtual DbSet<WeatherLocation> WeatherLocations { get; set; }
        public virtual DbSet<WeatherStation> WeatherStations { get; set; }
        public virtual DbSet<FeatureGeoLocationInfo> FeatureGeoLocationInfoes { get; set; }
        public virtual DbSet<FeatureGeoServeInfo> FeatureGeoServeInfoes { get; set; }
        public virtual DbSet<FeatureInfo> FeatureInfoes { get; set; }
        public virtual DbSet<SummaryInfo> SummaryInfoes { get; set; }
        public virtual DbSet<FeatureGeometryInfo> FeatureGeometryInfoes { get; set; }
        public virtual DbSet<WorkflowDefinition> WorkflowDefinitions { get; set; }
        public virtual DbSet<WorkflowLog> WorkflowLogs { get; set; }
        public virtual DbSet<WorkflowRun> WorkflowRuns { get; set; }
        public virtual DbSet<WorkflowTask> WorkflowTasks { get; set; }
        public virtual DbSet<WorkflowTaskParameter> WorkflowTaskParameters { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<TableMetadata> TableMetadatas { get; set; }
    
        public virtual int uspInsertWeatherDataCategoriesData(string id, string name)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWeatherDataCategoriesData", idParameter, nameParameter);
        }
    
        public virtual int uspInsertWeatherDatasetsData(Nullable<System.DateTime> date, string datatype, string stations, string attributes, Nullable<long> value)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var datatypeParameter = datatype != null ?
                new ObjectParameter("datatype", datatype) :
                new ObjectParameter("datatype", typeof(string));
    
            var stationsParameter = stations != null ?
                new ObjectParameter("stations", stations) :
                new ObjectParameter("stations", typeof(string));
    
            var attributesParameter = attributes != null ?
                new ObjectParameter("attributes", attributes) :
                new ObjectParameter("attributes", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWeatherDatasetsData", dateParameter, datatypeParameter, stationsParameter, attributesParameter, valueParameter);
        }
    
        public virtual int uspInsertWeatherDataTypesData(Nullable<System.DateTime> mindate, Nullable<System.DateTime> maxdate, string name, Nullable<decimal> datacoverage, string id)
        {
            var mindateParameter = mindate.HasValue ?
                new ObjectParameter("mindate", mindate) :
                new ObjectParameter("mindate", typeof(System.DateTime));
    
            var maxdateParameter = maxdate.HasValue ?
                new ObjectParameter("maxdate", maxdate) :
                new ObjectParameter("maxdate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var datacoverageParameter = datacoverage.HasValue ?
                new ObjectParameter("datacoverage", datacoverage) :
                new ObjectParameter("datacoverage", typeof(decimal));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWeatherDataTypesData", mindateParameter, maxdateParameter, nameParameter, datacoverageParameter, idParameter);
        }
    
        public virtual int uspInsertWeatherLocationsData(Nullable<System.DateTime> mindate, Nullable<System.DateTime> maxdate, string name, Nullable<decimal> datacoverage, string id)
        {
            var mindateParameter = mindate.HasValue ?
                new ObjectParameter("mindate", mindate) :
                new ObjectParameter("mindate", typeof(System.DateTime));
    
            var maxdateParameter = maxdate.HasValue ?
                new ObjectParameter("maxdate", maxdate) :
                new ObjectParameter("maxdate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var datacoverageParameter = datacoverage.HasValue ?
                new ObjectParameter("datacoverage", datacoverage) :
                new ObjectParameter("datacoverage", typeof(decimal));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWeatherLocationsData", mindateParameter, maxdateParameter, nameParameter, datacoverageParameter, idParameter);
        }
    
        public virtual int uspInsertWeatherStationsData(Nullable<decimal> elevation, Nullable<System.DateTime> mindate, Nullable<System.DateTime> maxdate, Nullable<decimal> latitude, string name, Nullable<decimal> datacoverage, string id, string elevationUnit, Nullable<decimal> longitude)
        {
            var elevationParameter = elevation.HasValue ?
                new ObjectParameter("elevation", elevation) :
                new ObjectParameter("elevation", typeof(decimal));
    
            var mindateParameter = mindate.HasValue ?
                new ObjectParameter("mindate", mindate) :
                new ObjectParameter("mindate", typeof(System.DateTime));
    
            var maxdateParameter = maxdate.HasValue ?
                new ObjectParameter("maxdate", maxdate) :
                new ObjectParameter("maxdate", typeof(System.DateTime));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("latitude", latitude) :
                new ObjectParameter("latitude", typeof(decimal));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var datacoverageParameter = datacoverage.HasValue ?
                new ObjectParameter("datacoverage", datacoverage) :
                new ObjectParameter("datacoverage", typeof(decimal));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var elevationUnitParameter = elevationUnit != null ?
                new ObjectParameter("elevationUnit", elevationUnit) :
                new ObjectParameter("elevationUnit", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("longitude", longitude) :
                new ObjectParameter("longitude", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWeatherStationsData", elevationParameter, mindateParameter, maxdateParameter, latitudeParameter, nameParameter, datacoverageParameter, idParameter, elevationUnitParameter, longitudeParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> uspGetlastrundate(string dataset)
        {
            var datasetParameter = dataset != null ?
                new ObjectParameter("dataset", dataset) :
                new ObjectParameter("dataset", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("uspGetlastrundate", datasetParameter);
        }
    
        public virtual int uspInsertWeatherDatasetTypesData(string uid, Nullable<System.DateTime> mindate, Nullable<System.DateTime> maxdate, string name, string datacoverage, string id)
        {
            var uidParameter = uid != null ?
                new ObjectParameter("uid", uid) :
                new ObjectParameter("uid", typeof(string));
    
            var mindateParameter = mindate.HasValue ?
                new ObjectParameter("mindate", mindate) :
                new ObjectParameter("mindate", typeof(System.DateTime));
    
            var maxdateParameter = maxdate.HasValue ?
                new ObjectParameter("maxdate", maxdate) :
                new ObjectParameter("maxdate", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var datacoverageParameter = datacoverage != null ?
                new ObjectParameter("datacoverage", datacoverage) :
                new ObjectParameter("datacoverage", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWeatherDatasetTypesData", uidParameter, mindateParameter, maxdateParameter, nameParameter, datacoverageParameter, idParameter);
        }
    
        public virtual int uspInsertWeatherLocationCategoriesData(string id, string name)
        {
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWeatherLocationCategoriesData", idParameter, nameParameter);
        }
    
        public virtual int uspInsertDatalog(string dataset, string datsetUrl, Nullable<System.DateTime> lastrundate, Nullable<System.DateTime> createddate, Nullable<bool> iscomplete, string dataLakeLogDescription)
        {
            var datasetParameter = dataset != null ?
                new ObjectParameter("dataset", dataset) :
                new ObjectParameter("dataset", typeof(string));
    
            var datsetUrlParameter = datsetUrl != null ?
                new ObjectParameter("datsetUrl", datsetUrl) :
                new ObjectParameter("datsetUrl", typeof(string));
    
            var lastrundateParameter = lastrundate.HasValue ?
                new ObjectParameter("lastrundate", lastrundate) :
                new ObjectParameter("lastrundate", typeof(System.DateTime));
    
            var createddateParameter = createddate.HasValue ?
                new ObjectParameter("createddate", createddate) :
                new ObjectParameter("createddate", typeof(System.DateTime));
    
            var iscompleteParameter = iscomplete.HasValue ?
                new ObjectParameter("Iscomplete", iscomplete) :
                new ObjectParameter("Iscomplete", typeof(bool));
    
            var dataLakeLogDescriptionParameter = dataLakeLogDescription != null ?
                new ObjectParameter("DataLakeLogDescription", dataLakeLogDescription) :
                new ObjectParameter("DataLakeLogDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDatalog", datasetParameter, datsetUrlParameter, lastrundateParameter, createddateParameter, iscompleteParameter, dataLakeLogDescriptionParameter);
        }
    
        public virtual ObjectResult<string> uspGetallStormdatasets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspGetallStormdatasets");
        }
    
        public virtual int uspInsertWarningData(string wARNINGTYPE, string mESSAGEID, System.Data.Entity.Spatial.DbGeography sHAPE, Nullable<System.DateTime> zTIME_END, Nullable<System.DateTime> zTIME_START, string iD, string iSSUEWFO)
        {
            var wARNINGTYPEParameter = wARNINGTYPE != null ?
                new ObjectParameter("WARNINGTYPE", wARNINGTYPE) :
                new ObjectParameter("WARNINGTYPE", typeof(string));
    
            var mESSAGEIDParameter = mESSAGEID != null ?
                new ObjectParameter("MESSAGEID", mESSAGEID) :
                new ObjectParameter("MESSAGEID", typeof(string));
    
            var sHAPEParameter = sHAPE != null ?
                new ObjectParameter("SHAPE", sHAPE) :
                new ObjectParameter("SHAPE", typeof(System.Data.Entity.Spatial.DbGeography));
    
            var zTIME_ENDParameter = zTIME_END.HasValue ?
                new ObjectParameter("ZTIME_END", zTIME_END) :
                new ObjectParameter("ZTIME_END", typeof(System.DateTime));
    
            var zTIME_STARTParameter = zTIME_START.HasValue ?
                new ObjectParameter("ZTIME_START", zTIME_START) :
                new ObjectParameter("ZTIME_START", typeof(System.DateTime));
    
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var iSSUEWFOParameter = iSSUEWFO != null ?
                new ObjectParameter("ISSUEWFO", iSSUEWFO) :
                new ObjectParameter("ISSUEWFO", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWarningData", wARNINGTYPEParameter, mESSAGEIDParameter, sHAPEParameter, zTIME_ENDParameter, zTIME_STARTParameter, iDParameter, iSSUEWFOParameter);
        }
    
        public virtual int uspinsertFeatureGeoLocationInfo(Nullable<int> geoServeId, Nullable<decimal> distance, Nullable<decimal> latitude, Nullable<decimal> longitude, string cityName, string direction, Nullable<long> population)
        {
            var geoServeIdParameter = geoServeId.HasValue ?
                new ObjectParameter("GeoServeId", geoServeId) :
                new ObjectParameter("GeoServeId", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            var populationParameter = population.HasValue ?
                new ObjectParameter("Population", population) :
                new ObjectParameter("Population", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspinsertFeatureGeoLocationInfo", geoServeIdParameter, distanceParameter, latitudeParameter, longitudeParameter, cityNameParameter, directionParameter, populationParameter);
        }
    
        public virtual int uspinsertfeaturegeometryinfo(string identificationCode, Nullable<decimal> longitude, Nullable<decimal> latitude, Nullable<decimal> depth, string type)
        {
            var identificationCodeParameter = identificationCode != null ?
                new ObjectParameter("IdentificationCode", identificationCode) :
                new ObjectParameter("IdentificationCode", typeof(string));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(decimal));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(decimal));
    
            var depthParameter = depth.HasValue ?
                new ObjectParameter("Depth", depth) :
                new ObjectParameter("Depth", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspinsertfeaturegeometryinfo", identificationCodeParameter, longitudeParameter, latitudeParameter, depthParameter, typeParameter);
        }
    
        public virtual int uspinsertFeatureGeoServeInfo(Nullable<int> geoServeId, string identificationCode, string country, string state, string geoServeCodeId, ObjectParameter oId)
        {
            var geoServeIdParameter = geoServeId.HasValue ?
                new ObjectParameter("GeoServeId", geoServeId) :
                new ObjectParameter("GeoServeId", typeof(int));
    
            var identificationCodeParameter = identificationCode != null ?
                new ObjectParameter("IdentificationCode", identificationCode) :
                new ObjectParameter("IdentificationCode", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var geoServeCodeIdParameter = geoServeCodeId != null ?
                new ObjectParameter("GeoServeCodeId", geoServeCodeId) :
                new ObjectParameter("GeoServeCodeId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspinsertFeatureGeoServeInfo", geoServeIdParameter, identificationCodeParameter, countryParameter, stateParameter, geoServeCodeIdParameter, oId);
        }
    
        public virtual int uspinsertfeatureinfo(string identificationCode, Nullable<decimal> magnitude, string place, Nullable<long> timeInMS, Nullable<long> lastUpdatedInMS, Nullable<System.DateTime> eventDateTime, Nullable<System.DateTime> lastUpdatedDateTime, Nullable<int> timeZoneOffset, string detail, Nullable<int> computedFeltIntesity, Nullable<int> numOfFeltReported, Nullable<int> maxInstrumentalIntesity, string alertLevel, Nullable<short> tsunamiFlag, Nullable<short> significancy, string preferredSourceNetworkId, string commaSeparatedSourceNetworkIds, string commaSeparatedProductTypes, Nullable<int> numOfSeismicStations, Nullable<double> horizontalDistance, Nullable<double> rmsTravelTime, string title, string typeOfSeismicEvent, string humanReviewedStatus, string uSGEventPageUrl)
        {
            var identificationCodeParameter = identificationCode != null ?
                new ObjectParameter("IdentificationCode", identificationCode) :
                new ObjectParameter("IdentificationCode", typeof(string));
    
            var magnitudeParameter = magnitude.HasValue ?
                new ObjectParameter("Magnitude", magnitude) :
                new ObjectParameter("Magnitude", typeof(decimal));
    
            var placeParameter = place != null ?
                new ObjectParameter("Place", place) :
                new ObjectParameter("Place", typeof(string));
    
            var timeInMSParameter = timeInMS.HasValue ?
                new ObjectParameter("TimeInMS", timeInMS) :
                new ObjectParameter("TimeInMS", typeof(long));
    
            var lastUpdatedInMSParameter = lastUpdatedInMS.HasValue ?
                new ObjectParameter("LastUpdatedInMS", lastUpdatedInMS) :
                new ObjectParameter("LastUpdatedInMS", typeof(long));
    
            var eventDateTimeParameter = eventDateTime.HasValue ?
                new ObjectParameter("EventDateTime", eventDateTime) :
                new ObjectParameter("EventDateTime", typeof(System.DateTime));
    
            var lastUpdatedDateTimeParameter = lastUpdatedDateTime.HasValue ?
                new ObjectParameter("LastUpdatedDateTime", lastUpdatedDateTime) :
                new ObjectParameter("LastUpdatedDateTime", typeof(System.DateTime));
    
            var timeZoneOffsetParameter = timeZoneOffset.HasValue ?
                new ObjectParameter("TimeZoneOffset", timeZoneOffset) :
                new ObjectParameter("TimeZoneOffset", typeof(int));
    
            var detailParameter = detail != null ?
                new ObjectParameter("Detail", detail) :
                new ObjectParameter("Detail", typeof(string));
    
            var computedFeltIntesityParameter = computedFeltIntesity.HasValue ?
                new ObjectParameter("ComputedFeltIntesity", computedFeltIntesity) :
                new ObjectParameter("ComputedFeltIntesity", typeof(int));
    
            var numOfFeltReportedParameter = numOfFeltReported.HasValue ?
                new ObjectParameter("NumOfFeltReported", numOfFeltReported) :
                new ObjectParameter("NumOfFeltReported", typeof(int));
    
            var maxInstrumentalIntesityParameter = maxInstrumentalIntesity.HasValue ?
                new ObjectParameter("MaxInstrumentalIntesity", maxInstrumentalIntesity) :
                new ObjectParameter("MaxInstrumentalIntesity", typeof(int));
    
            var alertLevelParameter = alertLevel != null ?
                new ObjectParameter("AlertLevel", alertLevel) :
                new ObjectParameter("AlertLevel", typeof(string));
    
            var tsunamiFlagParameter = tsunamiFlag.HasValue ?
                new ObjectParameter("TsunamiFlag", tsunamiFlag) :
                new ObjectParameter("TsunamiFlag", typeof(short));
    
            var significancyParameter = significancy.HasValue ?
                new ObjectParameter("Significancy", significancy) :
                new ObjectParameter("Significancy", typeof(short));
    
            var preferredSourceNetworkIdParameter = preferredSourceNetworkId != null ?
                new ObjectParameter("PreferredSourceNetworkId", preferredSourceNetworkId) :
                new ObjectParameter("PreferredSourceNetworkId", typeof(string));
    
            var commaSeparatedSourceNetworkIdsParameter = commaSeparatedSourceNetworkIds != null ?
                new ObjectParameter("CommaSeparatedSourceNetworkIds", commaSeparatedSourceNetworkIds) :
                new ObjectParameter("CommaSeparatedSourceNetworkIds", typeof(string));
    
            var commaSeparatedProductTypesParameter = commaSeparatedProductTypes != null ?
                new ObjectParameter("CommaSeparatedProductTypes", commaSeparatedProductTypes) :
                new ObjectParameter("CommaSeparatedProductTypes", typeof(string));
    
            var numOfSeismicStationsParameter = numOfSeismicStations.HasValue ?
                new ObjectParameter("NumOfSeismicStations", numOfSeismicStations) :
                new ObjectParameter("NumOfSeismicStations", typeof(int));
    
            var horizontalDistanceParameter = horizontalDistance.HasValue ?
                new ObjectParameter("HorizontalDistance", horizontalDistance) :
                new ObjectParameter("HorizontalDistance", typeof(double));
    
            var rmsTravelTimeParameter = rmsTravelTime.HasValue ?
                new ObjectParameter("RmsTravelTime", rmsTravelTime) :
                new ObjectParameter("RmsTravelTime", typeof(double));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var typeOfSeismicEventParameter = typeOfSeismicEvent != null ?
                new ObjectParameter("TypeOfSeismicEvent", typeOfSeismicEvent) :
                new ObjectParameter("TypeOfSeismicEvent", typeof(string));
    
            var humanReviewedStatusParameter = humanReviewedStatus != null ?
                new ObjectParameter("HumanReviewedStatus", humanReviewedStatus) :
                new ObjectParameter("HumanReviewedStatus", typeof(string));
    
            var uSGEventPageUrlParameter = uSGEventPageUrl != null ?
                new ObjectParameter("USGEventPageUrl", uSGEventPageUrl) :
                new ObjectParameter("USGEventPageUrl", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspinsertfeatureinfo", identificationCodeParameter, magnitudeParameter, placeParameter, timeInMSParameter, lastUpdatedInMSParameter, eventDateTimeParameter, lastUpdatedDateTimeParameter, timeZoneOffsetParameter, detailParameter, computedFeltIntesityParameter, numOfFeltReportedParameter, maxInstrumentalIntesityParameter, alertLevelParameter, tsunamiFlagParameter, significancyParameter, preferredSourceNetworkIdParameter, commaSeparatedSourceNetworkIdsParameter, commaSeparatedProductTypesParameter, numOfSeismicStationsParameter, horizontalDistanceParameter, rmsTravelTimeParameter, titleParameter, typeOfSeismicEventParameter, humanReviewedStatusParameter, uSGEventPageUrlParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetmaxGeoServeId()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetmaxGeoServeId");
        }
    
        public virtual ObjectResult<Nullable<int>> GetmaxGeoServeIdlOCATION()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetmaxGeoServeIdlOCATION");
        }
    
        public virtual int uspInsertWorkflowRun(Nullable<int> workflowDefinitionID, Nullable<int> status, Nullable<System.DateTime> startedOn, Nullable<System.DateTime> completedOn, Nullable<bool> hasErrors, string cutoffValue, Nullable<System.DateTime> cutoffDateTime)
        {
            var workflowDefinitionIDParameter = workflowDefinitionID.HasValue ?
                new ObjectParameter("WorkflowDefinitionID", workflowDefinitionID) :
                new ObjectParameter("WorkflowDefinitionID", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(int));
    
            var startedOnParameter = startedOn.HasValue ?
                new ObjectParameter("StartedOn", startedOn) :
                new ObjectParameter("StartedOn", typeof(System.DateTime));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            var hasErrorsParameter = hasErrors.HasValue ?
                new ObjectParameter("HasErrors", hasErrors) :
                new ObjectParameter("HasErrors", typeof(bool));
    
            var cutoffValueParameter = cutoffValue != null ?
                new ObjectParameter("CutoffValue", cutoffValue) :
                new ObjectParameter("CutoffValue", typeof(string));
    
            var cutoffDateTimeParameter = cutoffDateTime.HasValue ?
                new ObjectParameter("CutoffDateTime", cutoffDateTime) :
                new ObjectParameter("CutoffDateTime", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWorkflowRun", workflowDefinitionIDParameter, statusParameter, startedOnParameter, completedOnParameter, hasErrorsParameter, cutoffValueParameter, cutoffDateTimeParameter);
        }
    
        public virtual ObjectResult<uspGetWorkFlowIDS_Result> uspGetWorkFlowIDS(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorkFlowIDS_Result>("uspGetWorkFlowIDS", gUIDParameter);
        }
    
        public virtual int uspInsertWorkflowLog(Nullable<int> workflowRunID, Nullable<int> workflowTaskID, Nullable<int> logLevel, string message, Nullable<System.DateTime> timestamp, string exceptionType, string exceptionJSON)
        {
            var workflowRunIDParameter = workflowRunID.HasValue ?
                new ObjectParameter("workflowRunID", workflowRunID) :
                new ObjectParameter("workflowRunID", typeof(int));
    
            var workflowTaskIDParameter = workflowTaskID.HasValue ?
                new ObjectParameter("workflowTaskID", workflowTaskID) :
                new ObjectParameter("workflowTaskID", typeof(int));
    
            var logLevelParameter = logLevel.HasValue ?
                new ObjectParameter("logLevel", logLevel) :
                new ObjectParameter("logLevel", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var timestampParameter = timestamp.HasValue ?
                new ObjectParameter("timestamp", timestamp) :
                new ObjectParameter("timestamp", typeof(System.DateTime));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("exceptionType", exceptionType) :
                new ObjectParameter("exceptionType", typeof(string));
    
            var exceptionJSONParameter = exceptionJSON != null ?
                new ObjectParameter("exceptionJSON", exceptionJSON) :
                new ObjectParameter("exceptionJSON", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertWorkflowLog", workflowRunIDParameter, workflowTaskIDParameter, logLevelParameter, messageParameter, timestampParameter, exceptionTypeParameter, exceptionJSONParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> uspGetWorkFlowRunID(Nullable<int> workflowDefinationID)
        {
            var workflowDefinationIDParameter = workflowDefinationID.HasValue ?
                new ObjectParameter("workflowDefinationID", workflowDefinationID) :
                new ObjectParameter("workflowDefinationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("uspGetWorkFlowRunID", workflowDefinationIDParameter);
        }
    
        public virtual int uspUpdateWorkflowRun(Nullable<int> workflowDefinitionID, Nullable<System.DateTime> completedOn)
        {
            var workflowDefinitionIDParameter = workflowDefinitionID.HasValue ?
                new ObjectParameter("workflowDefinitionID", workflowDefinitionID) :
                new ObjectParameter("workflowDefinitionID", typeof(int));
    
            var completedOnParameter = completedOn.HasValue ?
                new ObjectParameter("CompletedOn", completedOn) :
                new ObjectParameter("CompletedOn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateWorkflowRun", workflowDefinitionIDParameter, completedOnParameter);
        }
    
        public virtual ObjectResult<uspGetLogParameter_Result> uspGetLogParameter(Nullable<int> workflowDefinationID)
        {
            var workflowDefinationIDParameter = workflowDefinationID.HasValue ?
                new ObjectParameter("workflowDefinationID", workflowDefinationID) :
                new ObjectParameter("workflowDefinationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetLogParameter_Result>("uspGetLogParameter", workflowDefinationIDParameter);
        }
    
        public virtual ObjectResult<uspGetWorkFlowParameter_Result> uspGetWorkFlowParameter(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorkFlowParameter_Result>("uspGetWorkFlowParameter", gUIDParameter);
        }
    
        public virtual ObjectResult<GetWorkFlowServiceURL_Result2> GetWorkFlowServiceURL(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkFlowServiceURL_Result2>("GetWorkFlowServiceURL", gUIDParameter);
        }
    
        public virtual ObjectResult<GetWorkFlowURLParameter_Result> GetWorkFlowURLParameter(string gUID)
        {
            var gUIDParameter = gUID != null ?
                new ObjectParameter("GUID", gUID) :
                new ObjectParameter("GUID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWorkFlowURLParameter_Result>("GetWorkFlowURLParameter", gUIDParameter);
        }
    
        public virtual ObjectResult<uspGetMasterData_Result> uspGetMasterData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMasterData_Result>("uspGetMasterData");
        }
    
        public virtual ObjectResult<uspGetWorkflowRunData_Result> uspGetWorkflowRunData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorkflowRunData_Result>("uspGetWorkflowRunData");
        }
    
        public virtual ObjectResult<uspGetWorkflowLogData_Result> uspGetWorkflowLogData(Nullable<int> workflowDefinitionId)
        {
            var workflowDefinitionIdParameter = workflowDefinitionId.HasValue ?
                new ObjectParameter("workflowDefinitionId", workflowDefinitionId) :
                new ObjectParameter("workflowDefinitionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetWorkflowLogData_Result>("uspGetWorkflowLogData", workflowDefinitionIdParameter);
        }
    }
}
